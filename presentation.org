#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:1
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 999
#+REVEAL_EXTRA_CSS: ./presentation.css

#+TITLE: Introduction to Datomic
#+AUTHOR: Daniel De Aguiar
#+EMAIL: ddeaguiar@gmail.com

* About Me
- Software Engineer/Consultant.
- Currently working with Clojure.
* What /is/ Datomic?
** Datomic is

#+ATTR_REVEAL: :frag (appear)
A relational database

#+ATTR_REVEAL: :frag (appear)
Where information consists of /facts/

#+ATTR_REVEAL: :frag (appear)
And facts accumulate

#+ATTR_REVEAL: :frag (appear)
It is not /Place Oriented/

#+BEGIN_NOTES
Datomic is an /information system/.

Facts are called /datoms/.

The past is immutable.

New information /does not/ replace old, in place.
#+END_NOTES

** Ledger

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_QUOTE
The ledger is a permanent summary of all amounts entered in supporting
journals which list individual transactions by date.
- https://en.wikipedia.org/wiki/Ledger
#+END_QUOTE

#+BEGIN_NOTES
Ledgers have been used in bookkeeping for thousands of years.

Key points from the quote:
- /Permanent/ summary
- /List/ of individual transactions
- /by/ date
#+END_NOTES

** Git

#+BEGIN_NOTES
Our version control systems are purpose built for tracking change at various degrees of granularity.

We value tools like this and would (should) go up in arms if were told not to use them.
#+END_NOTES

** What are facts?
#+ATTR_REVEAL: :frag (appear)
- A fact is a statement about an entity.
- Facts are tuples.

#+BEGIN_NOTES
A fact relates an entity (subject) to a value through an attribute (predicate).
#+END_NOTES

** Fact tuples

/[Entity Attribute Value]/

#+BEGIN_NOTES
Structure of a Fact tuple
#+END_NOTES

** Fact example
#+ATTR_HTML: :width 100%
| Entity | Attribute | Value    |
|--------+-----------+----------|
| dan    | likes     | fishing  |

** Fact example
#+ATTR_HTML: :width 100%
| Entity | Attribute | Value          |
|--------+-----------+----------------|
| dan    | likes     | fishing        |
| dan    | likes     | fly fishing    |

#+BEGIN_NOTES
How are these changes represented given that Datomic accumulates facts?
The next slides revisit our fact tuple example in this context.
#+END_NOTES

** Fact tuples are 5-tuples
/[Entity Attribute Value Transaction Operation]/

#+BEGIN_NOTES
Transaction is the transaction id.

Operation represents either an /assertion/ or /retraction/.
#+END_NOTES

** Revisit our fact example
#+ATTR_HTML: :width 100%
| Entity | Attribute | Value          | Transaction | Operation |
|--------+-----------+----------------+-------------+-----------|
| dan    | likes     | fishing        |        1000 | true      |
| dan    | likes     | fishing        |        1210 | false     |
| dan    | likes     | fly fishing    |        1210 | true      |

** A Datomic database is a collection of fact tuples
*** Entity Example
#+BEGIN_SRC clojure
[{:name "Daniel" :likes "Fishing" :drives "Subaru"}
 {:name "Kolby" :likes "Gaming"}
 {:name "Juan" :likes "Fishing" :drives "Ford"}]
#+END_SRC

#+BEGIN_NOTES
Take a map representation of an entity and convert it to a collection
of tuples. This collection is a simple database.
#+END_NOTES

*** Fact Database
#+BEGIN_SRC clojure
[["Daniel" :likes "Fishing"]
 ["Daniel" :drives "Subaru"]
 ["Kolby" :likes "Gaming"]
 ["Juan" :likes "Fishing"]
 ["Juan" :drives "Ford"]]
#+END_SRC

#+BEGIN_NOTES
This /database/ is an /immutable/ clojure value.
Datomic databases /are/ immutable and can be treated as values!
#+END_NOTES

** Querying the database

We can query the database using Datomic Datalog.

#+ATTR_REVEAL: :frag (appear)
Datalog is a /declarative/ database query language

#+BEGIN_NOTES
Datalog has roots in logic programming.
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
Code sample

#+ATTR_REVEAL: :frag (appear)
http://www.learndatalogtoday.org/

* Datomic's architecture

- Peer(s)
- Transactor
- Storage

http://docs.datomic.com/architecture.html

#+BEGIN_NOTES
- Composition of simple services
- Leverage redundant, scalable storage systems (We are no longer constrained by space!)
- Separation of writes from reads
- Favors ACID transactions over write scalability
- Distributed index resides in the application server tier, localizing queries.
#+END_NOTES

** Peers
- Submit transactions
- Provide data access capabilities

#+BEGIN_NOTES
Embedded. JVM languages only.

Provides caching.

Reads from storage if necessary.
#+END_NOTES

** Transactor
- Accepts transactions
- Processes transactions serially
- Writes to storage

#+BEGIN_NOTES
Provides Datomic's ACID guarantees.
#+END_NOTES

** Storage
- Interface to underlying storage
** Clients
- Light-weight
- Submit transactions
- Provides data access capabilities

#+BEGIN_NOTES
Embedded. Any language.

Does not provide caching.

#+END_NOTES

** Peer Server
- Accepts queries/transactions from Clients.
- Submits transactions
- Provides data access

#+BEGIN_NOTES
JVM Process.

Provides caching.
#+END_NOTES

** Trade-offs
Favors ACID transactions over write scalability

#+BEGIN_NOTES
Not well suited for systems that favor unlimited write scalability.
#+END_NOTES
* Working with Datomic
** In-memory database
#+BEGIN_SRC clojure
(require '[datomic.api :as d])

(def uri "datomic:mem://my-db")

(d/create-database uri)

(def conn (d/connect uri))
(def db (d/db conn))
#+END_SRC

#+BEGIN_NOTES
The database as a value that is passed to functions.

We'll see how powerful this is later when we demonstrate:
- Applying prospective changes.
#+END_NOTES
** Schema
#+BEGIN_SRC clojure
[{:db/ident       :person/name
  :db/doc         "The person's name"
  :db/valueType   :db.type/string
  :db/unique      :db.unique/identity
  :db/cardinality :db.cardinality/one}
 {:db/ident       :person/likes
  :db/doc         "The person's hobby"
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db/index       true}
 {:db/ident       :person/drives
  :db/doc         "The model of vehicle the person drives."
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db/index       true}
 {:db/ident       :person/secretNumber
  :db/doc         "A super secret number"
  :db/valueType   :db.type/long
  :db/cardinality :db.cardinality/one}
 {:db/id    "people"
  :db/ident :people}
 [:db/add :db.part/db :db.install/partition "people"]]
#+END_SRC

#+BEGIN_NOTES
The attributes that an an entity contains is defined
at transact time by the application.

:db.unique/identity attributes are automatically indexed.
#+END_NOTES

*** Attribute types

- String
- UUID
- Long
- BigInteger
- Float
- Double
- BigDecimal
- boolean
- ref
- instant
- keyword
- URI
- bytes

*** Optional Schema attributes

- :db/unique
- :db/index
- :db/doc
- :db/fulltext
- :db/isComponent
- :db/noHistory

*** Partitions

- Partitions group data together
- Increases query performance

#+ATTR_REVEAL: :frag (appear)
Code sample

#+BEGIN_NOTES
The docs state that the :db.part/user partition should only be used
for experimentation. Your schema should create one or more partitions
appropriate for your application.

Schema attributes are created in the :db.part/db partition.
Transaction entities reside in the :db.part/tx partition.
#+END_NOTES

** Prospective changes
Changes can be applied to a database value /locally/.

#+BEGIN_NOTES
Using the same semantics of `transact`
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
Code sample

** History
The history of changes can be queried.

#+ATTR_REVEAL: :frag (appear)
Code sample

** Time
The database viewed at different points in time.

#+ATTR_REVEAL: :frag (appear)
Code sample

** Adhoc Filtering
The database can be filtered using arbitrary predicates.

#+ATTR_REVEAL: :frag (appear)
Code sample

** Datomic + Scala
- Datomic provides Java APIs.
- [[http://www.scalamolecule.org/][Molecule library]]
- [[https://github.com/dwhjames/datomisca][Datomisca library]]

#+BEGIN_NOTES
Datomisca has not been updated in some time.
#+END_NOTES
*** Talks
- [[http://www.scalamolecule.org/][Molecule videos]]
- [[https://www.youtube.com/watch?v=AFakD8e7WsQ][Clojure is a Foreign Country: Combining Datomic with Scala - Peter Brachwitz]]

** Datomic Indexes

| Desired read shape | Datomic supports via         |
|--------------------+------------------------------|
| k/v                | AVET                         |
| row                | EAVT                         |
| column             | AEVT                         |
| document           | EAVT, partitions, components |
| graph              | VAET                         |

From: /Why Datomic, Part 1/

(http://www.datomic.com/videos.html)

#+BEGIN_NOTES
Datomic's indexes support different ways of reading data.

This does not have to be an upfront design decision.
#+END_NOTES

* Wrapping up
- http://www.datomic.com/

#+ATTR_REVEAL: :frag (appear)
If you'd like to talk more about Datomic and/or Clojure at your organization, let me know!

#+BEGIN_NOTES
Hand out Datomic stickers!
#+END_NOTES
